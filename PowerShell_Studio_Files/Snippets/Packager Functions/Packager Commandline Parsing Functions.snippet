<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>Packager Commandline Parsing Functions</Title>
			<Shortcut></Shortcut>
			<Description>Inserts functions that allow you to parse package executable parameters.</Description>
			<Author>SAPIEN Technologies, Inc.</Author>
			<SnippetTypes>
				<SnippetType>Expansion</SnippetType>
			</SnippetTypes>
		</Header>
		<Snippet>
			<Code Language="PowerShell">
				<![CDATA[function Parse-Commandline 
{ 
<#
	.SYNOPSIS
		Parses the Commandline of a package executable

	.DESCRIPTION
		Parses the Commandline of a package executable

	.PARAMETER  Commandline
		The Commandline of the package executable

	.EXAMPLE
		$arguments = Parse-Commandline -Commandline $Commandline

	.INPUTS
		System.String

	.OUTPUTS
		System.Collections.Specialized.StringCollection
#>

	[OutputType([System.Collections.Specialized.StringCollection])]
    Param([string]$CommandLine) 
	
    $Arguments = New-Object System.Collections.Specialized.StringCollection 
	
	if($CommandLine)
	{
	    #Find First Quote 
	    $index = $CommandLine.IndexOf('"') 

	    while ( $index -ne -1) 
	    {#Continue as along as we find a quote 
	        #Find Closing Quote 
	        $closeIndex = $CommandLine.IndexOf('"',$index + 1) 
	        if($closeIndex -eq -1) 
	        { 
	            break #Can’t find a match 
	        } 
	        $value = $CommandLine.Substring($index + 1,$closeIndex – ($index + 1)) 
	        [void]$Arguments.Add($value) 
	        $index = $closeIndex 

	        #Find First Quote 
	        $index = $CommandLine.IndexOf('"',$index + 1) 
	    } 
	}
    return ,$Arguments 
}

function Convert-CommandLineToDictionary 
{ 
	<#
	.SYNOPSIS
		Parses and converts the commandline of a packaged executable into a Dictionary

	.DESCRIPTION
		Parses and converts the commandline of a packaged executable into a Dictionary

	.PARAMETER  Dictionary
		The Dictionary to load the value pairs into.

	.PARAMETER  CommandLine
		The commandline of the package executable

	.PARAMETER  ParamIndicator
		The character used to indicate what is a parameter.
	
	.EXAMPLE
		$Dictionary = New-Object System.Collections.Specialized.StringDictionary
		Convert-CommandLineToDictionary -Dictionary $Dictionary -CommandLine $Commandline  -ParamIndicator '-'
	#>
    Param(	[ValidateNotNull()]
			[System.Collections.Specialized.StringDictionary]$Dictionary,
			[string]$CommandLine, 
			[char] $ParamIndicator) 

	$Params = Parse-Commandline $CommandLine
	
    for($index = 0; $index -lt $Params.Count; $index++) 
    { 
        [string]$param = $Params[$index] 
        #Clear the values 
        $key = "" 
        $value = "" 

        if($param.StartsWith($ParamIndicator)) 
        { 
            #Remove the indicator 
            $key = $param.Remove(0,1) 
            if($index  + 1 -lt $Params.Count) 
            { 
                #Check if the next Argument is a parameter 
                [string]$param = $Params[$index + 1] 
                if($param.StartsWith($ParamIndicator) -ne $true ) 
                { 
                    #If it isn’t a parameter then set it as the value 
                    $value = $param 
                    $index++ 
                } 
            } 
            $Dictionary[$key] = $value 
        }#else skip 
    } 
}

]]>
			</Code>
		</Snippet>
	</CodeSnippet>
</CodeSnippets>