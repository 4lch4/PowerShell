<ControlTemplate version="2.1" dpi="96" scaleMode="Font" scaleDimensions="6, 13">
  <Description>The Process Tracker adds a framework to manage processes in a GUI. Use the ProcessTracker to create responsive forms.</Description>
  <Icon>iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAJoSURBVDhPpVLbT5JhGPdPyoVhXdVNA9dFd90aYhdetKXTbgLUspO5inTOBRhSFtDBY36AoIQM2yqqCQJureaB7yC0tVlbHn49z/t9xbr2g2fv+z7f+zy/w/PV1R32GQiq6A/LuBPU0B/So29cgWNMRqdHQdvgFmx3N3DuZhlnu7dw2rGBk13rONH+DQKbiwMp4FFqH6PJAzyM72FY2oV7Zg+3J3ZxLfwbjme/cNm/gw7PT7SN7MA+9AP19qzRIKgI1FthYhJScf2JjCteFReHyzpy3ybOEOqpznU0tn+BuWMTxy99xRFbWm8QmHqLbSUvoiqXaC1A0fhcgKYaoZRob+TKayJvstr1Br6XabrMhXl8V4pQlVVR7PJGcNUr0TqHHk8Evd4YHN7XqKhrKK4swtRk0xuMhBJUlMM9n4Se+2F03fCLht2+KPZxAP5D31GTKDR5FflcEg1WowFLqKiELBcFsi6nBKdHEgVOEfOioZNYbas5rHxKwGQ5/78Eps/FGmskFKGZLoszr5Tj9ywh+y6CRmtrTUKlzAUFVMpFcYGZMJrLE4WLkNkPZsJnjdi9z0RIgmHi0DglqXiADOp1Pzc8yAvKQr7hAW9doxKqxCKzNI16qyHBHZj9R02MjUdGfjh9c2ICOjqx8cUEA5aaWpyE2WKY+GAsIubPMqo0DdZeldnMgrHq38bfHPswH39RG+OgfwYKIRfzaRQ+v0Euu4CP2Tg+LEtYzsxiKTWJZOIVFiJBxKSnkKYeY3rCXxsjM+CZcvDHweYcszSjoalV5Jgq58yWCzhqbSb3W8TZZGnRpwD6Heb5A1QFj1nYuZisAAAAAElFTkSuQmCC</Icon>
  <Identifiers>
    <ID id="1" name="processTracker_FormClosed" type="event" shared="True"/>
    <ID id="2" name="timerProcessTracker" type="object" useExistingTypeMatchName="True"/>
    <ID id="3" name="timerProcessTracker_Tick" type="event" shared="True"/>
  </Identifiers>
  <Objects>
    <Object type="System.Windows.Forms.Timer, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="%ID:2%">
      <Event name="Tick">%ID:3%</Event>
    </Object>
  </Objects>
  <Container>
    <Events>
      <Event name="FormClosed">%ID:1%</Event>
    </Events>
  </Container>
  <Events>
    <Event id="1"><![CDATA[$%ID:1%=[System.Windows.Forms.FormClosedEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.FormClosedEventArgs]
	#Stop any pending processes
	#Stop-ProcessTracker
}]]></Event>
    <Event id="3"><![CDATA[$%ID:3%={
	Update-ProcessTracker
}]]></Event>
  </Events>
  <Functions>
    <Function name="Stop-ProcessTracker" region="Process Tracker"><![CDATA[function Stop-ProcessTracker
{
	<#
		.SYNOPSIS
			Stops and removes all processes from the list.
	#>
	#Stop the timer
	$%ID:2%.Stop()
	
	#Remove all the processes
	while($ProcessTrackerList.Count -gt 0)
	{
		$process = $ProcessTrackerList[0].Process
		$ProcessTrackerList.RemoveAt(0)
		if(-not $psObject.Process.HasExited)
		{
			Stop-Process -InputObject $process
		}
	}
}]]></Function>
    <Function name="Update-ProcessTracker" region="Process Tracker"><![CDATA[function Update-ProcessTracker
{
	<#
		.SYNOPSIS
			Checks the status of each job on the list.
	#>
	
	#Poll the jobs for status updates
	$%ID:2%.Stop() #Freeze the Timer
	
	for($index =0; $index -lt $ProcessTrackerList.Count; $index++)
	{
		$psObject = $ProcessTrackerList[$index]
		
		if($null -ne $psObject) 
		{
			if($null -ne $psObject.Process)
			{
				if($psObject.Process.HasExited)
				{				
					#Call the Complete Script Block
					if($null -ne $psObject.CompleteScript)
					{
						#$results = Receive-Job -Job $psObject.Job
						Invoke-Command -ScriptBlock $psObject.CompleteScript -ArgumentList $psObject.Process
					}
					
					$ProcessTrackerList.RemoveAt($index)
					$index-- #Step back so we don't skip a job
				}
				elseif($null -ne $psObject.UpdateScript)
				{
					#Call the Update Script Block
					Invoke-Command -ScriptBlock $psObject.UpdateScript -ArgumentList $psObject.Process
				}
			}
		}
		else
		{
			$ProcessTrackerList.RemoveAt($index)
			$index-- #Step back so we don't skip a job
		}
	}
	
	if($ProcessTrackerList.Count -gt 0)
	{
		$%ID:2%.Start()#Resume the timer	
	}	
}]]></Function>
    <Function name="Add-ProcessTracker" region="Process Tracker">
      <![CDATA[$ProcessTrackerList = New-Object System.Collections.ArrayList
function Add-ProcessTracker
{
	<#
		.SYNOPSIS
			Add a new process to the ProcessTracker and starts the timer.
	
		.DESCRIPTION
			Add a new process to the ProcessTracker and starts the timer.
	
		.PARAMETER  FilePath
			The path to executable.
	
		.PARAMETER ArgumentList
			The arguments to pass to the process.
	
		.PARAMETER  CompleteScript
			The script block that will be called when the process is complete.
			The process is passed as an argument. The process argument is null when the job fails.
	
		.PARAMETER  UpdateScript
			The script block that will be called each time the timer ticks.
			The process is passed as an argument.
	
		.EXAMPLE
			 Add-ProcessTracker -FilePath "$env:windir/System32/notepad.exe" `
			-CompletedScript {
				Param([System.Diagnostics.Process]$Process)
				$button.Enable = $true
			}`
			-UpdateScript {
				Param([System.Diagnostics.Process]$Process)
				Function-Animate $button
			}
	
		.LINK
			
	#>
	
	Param(
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	[string]$FilePath,
	$ArgumentList = $null,
	[ScriptBlock]$CompletedScript,
	[ScriptBlock]$UpdateScript)
	
	#Start the Job
	if($ArgumentList)
	{
		$process = Start-Process -FilePath $FilePath -ArgumentList $ArgumentList -PassThru
	}
	else
	{
		$process = Start-Process -FilePath $FilePath -PassThru
	}
	
	if($null -ne $process)
	{
		#Create a Custom Object to keep track of the Job & Script Blocks
		$members = @{	"Process" = $process;
						"CompleteScript" = $CompletedScript;
						"UpdateScript" = $UpdateScript}
		
		$psObject = New-Object System.Management.Automation.PSObject -Property $members
		
		[void]$ProcessTrackerList.Add($psObject)	
		
		#Start the Timer
		if(-not $timerProcessTracker.Enabled)
		{
			$timerProcessTracker.Start()
		}
	}
	elseif($null -ne $CompletedScript)
	{
		#Failed
		Invoke-Command -ScriptBlock $CompletedScript -ArgumentList $null
	}

}]]></Function>
  </Functions>
</ControlTemplate>