<File version="2.1">
  <FileID>%Indentifier%</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAC56SURBVHhe7d0JcJzlnefxTE1mK7tVW1u1tVVT
m9rK7EztZKZmMmGSyn1gEwjnMBBCOBJuYzAECKcvMBhjbAwYg40N5jA+hGVbki3Luu/7vu/77G61
bkuyDTHHb5/nlQS23IBsrGD7+X6rPiXc6n673xbVz//tQ/oaERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERkaPlGp1/8zd/0/nd7/5b
57zbb++88875AADgLHD3XXd1zp0zp/PrX/9651/91V91mjW9xVvdv6i//uu/Dn7rW9/Sdb/7nda8
8JKyCirU3NnvaeroAwAAZ6jmrgHVNndp5+5I3Xrrrfr2P/6jzAG9Jpf4L6zzd2bxj9gXq9KmXmVW
diizog0AAJwFMsrbVNocVGZuie6aP1/f+MY3jk6u75/fv33nO53Prn5BZWbxzyhvVaZhvwIAgDOf
XbfTylpU3tqv8Ih9+tlPfzqzAeD222/vzMgrV05Vp7LMJAEAAM4+6WWtaurq19Ilj89sAJg/f35n
u39Y2XYAqGwHAABnIftSgG/wPTMAPDHzAaDTDAD2GYBsswEAAHD2se8H6O47pMWLl858AOjwDym3
ussMAR0AAJx2eTVdKqz3qahh9hTU9Zi1rNO7Pvu1oK475PlOF7s/ebWfrp1/6X2czj4L0N1vB4Al
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
AAcxAAAA4CAGAAAAHMQAAACAgxgAAABwEAMAAAAOYgAAAMBBDAAAADiIAQAAAAcxAAAA4CAGAAAA
HMQAAACAgxgAAABwEAMAAAAOYgAAAMBBDAAAADiIAQAAAAcxAAAA4CAGAAAAHMQAAACAgxgAAABw
EAMAAAAOYgAAAMBBDAAAADiIAQAAAAcxAAAA4CAGAAAAHMQAAACAgxgAAABwEAMAAAAOYgAAAMBB
DAAAADiIAQAAAAcxAAAA4CAGAAAAHMQAAACAgxgAAABwEAMAAAAOYgAAAMBBDAAAADiIAQAAAAcx
AAAA4CAGAAAAHMQAAACAgxgAAABwEAMAAAAOYgAAAMBBDAAAADiIAQAAAAcxAAAA4CAGAAAAHMQA
AACAgxgAAABwEAMAAAAOYgAAAMBBDAAAADiIAQAAAAcxAAAA4CAGAAAAHMQAAACAgxgAAABwEAMA
AAAOYgAAAMBBDAAAADiIAQAAAAcxAAAA4CAGAAAAHMQAAACAgxgAAABwEAMAAAAOYgAAAMBBDAAA
ADiIAQAAAAcxAAAA4CAGAAAAHMQAAACAgxgAAABwEAMAAAAOYgAAAMBBDAAAADiIAQAAAAcxAAAA
4CAGAAAAHMQAAACAgxgAAABwEAMAAAAOYgAAAMBBDAAAADiIAQAAAAcxAAAA4CAGAAAAHMQAAACA
gxgAAABwEAMAAAAOYgAAAMBBDAAAADiIAQAAAAcxAAAA4CAGAAAAHMQAAACAgxgAAABwEAMAAAAO
YgAAAMBBDAAAADiIAQAAAAcxAAAA4CAGAAAAHMQAAACAgxgAAABwEAMAAAAOYgAAAMBBDAAAADiI
AQAAAAcxAAAA4CAGAAAAHMQAAACAgxgAAABwEAMAAAAOYgAAAMBBDAAAADiIAQAAAAcxAAAA4CAG
AAAAHMQAAACAgxgAAABwEAMAAAAOYgAAAMBBDAAAADiIAQAAAAcxAAAA4CAGAAAAHMQAAACAgxgA
AABwEAMAAAAOYgAAAMBBDAAAADiIAQAAAAcxAAAA4CAGAAAAHMQAAACAgxgAAABwEAMAAAAOYgAA
AMBBDAAAADiIAQAAAAcxAAAA4CAGAAAAHMQAAACAgxgAAABwEAMAAAAOYgAAAMBBDAAAADiIAQAA
AAcxAAAA4CAGAAAAHMQAAACAgxgAAABwEAMAAAAOYgAAAMBBDAAAADiIAQAAAAcxAAAA4CAGAAAA
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
SUBSv3K2vqK1r7ylbXszVZz5rpY/+Li2JJWpsz9wWg4kp3N+ALC/A6CmplqXXnaFLvuPq3Xttdfq
d7+7RpdffoXm/PLHWrJ4qY4c/cj7H2Pc7PzwUFDdHeaO6xvSmD1tfOJjgIFgnwaHh9VXvEd3XvcT
/er3b6jO13vafo8AAwAAzK7ZGwAmPgruCw5OrhsTPvroI1VUlOnKSy/S3LkX6fKrfqNbbrlJ/p5O
9Q2MaHR8VAPeLwPiJYDjnK4BwP6QW1tbtW/fPkVFRR0nOjpa6enpZhGf4VF8t089TRVKio9VZnWL
fN2n738gBgAAmF2zOQCEYtcWe13Hrjv2r/O1t7cf99sBZ8tZPwAUFxd7v1PZ7sipss8CjIyMhGT/
TrL9IYW63Il88gWCGhoa1lB/MMT3T5393QSNjY0MAAAwS6YGAPtYax9zQz0Wn052bbHXc+yaMzw8
HPK8s8GunXYNPSsHAPsnDO3fbbZf7Z80PJfZH5L9M5X2bzjbv1kd6j4BAJw6+9hqH2PtY619zA31
WHwuOXYNPasGADup2acw7A/J3ng7wZzL7D7afW1qavJ+BXGo+wQAcOrsY6t9jHVtXbFr6UyeWT5j
BgDL3mA7tbiEo38AmD32MTbUY++5bKYvK59RAwAAAPjLYAAAAMBBDAAAADiIAQAAAAcxAAAA4CAG
AAAAHMQAAACAgxgAAABw0KwPAPYv7tkrAQAAZ45DYwfVPRsDgNXkH/OmCwAAcOZpCdhFfxYGAMtO
FgAA4Mxz7OJvndYBAAAAnB0YAAAAcNCpDQD942oMHPEuDAAAzj51vkPqH/9o5gPAHXfM842Mf6Ch
Q/ImBwAAcPYZGPtI738kLVq0+OPJJf7z+81vrmlZtGjJUXOBo3ZqAAAAZ6PFRxcvWXr0uuuuOzy5
xBMRERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERE51te+9v8B7q5fhVkS2qQAAAAASUVORK5CYII=</Preview>
  <Object type="System.Windows.Forms.Form, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="formMain" children="Controls">
    <Property name="AutoScaleDimensions">6, 13</Property>
    <Property name="AutoScaleMode">Font</Property>
    <Property name="ClientSize">584, 362</Property>
    <Property name="Name">formMain</Property>
    <Property name="StartPosition">CenterScreen</Property>
    <Property name="Text">Grid Search</Property>
    <Event name="FormClosed">formMain_FormClosed</Event>
    <Event name="Load">formMain_Load</Event>
    <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="buttonStartJob" children="Controls">
      <Property name="Anchor">Bottom, Left</Property>
      <Property name="ImageList">
        <Reference name="imagelistButtonBusyAnimation" />
      </Property>
      <Property name="Location">13, 327</Property>
      <Property name="Name">buttonStartJob</Property>
      <Property name="Size">75, 23</Property>
      <Property name="TabIndex">0</Property>
      <Property name="Text">&amp;Query</Property>
      <Property name="TextImageRelation">ImageBeforeText</Property>
      <Property name="UseVisualStyleBackColor">True</Property>
      <Event name="Click">buttonStartJob_Click</Event>
    </Object>
    <Object type="System.Windows.Forms.TextBox, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="textboxSearch" children="Controls">
      <Property name="Anchor">Top, Left, Right</Property>
      <Property name="Location">13, 15</Property>
      <Property name="Name">textboxSearch</Property>
      <Property name="Size">477, 20</Property>
      <Property name="TabIndex">0</Property>
      <Event name="KeyDown">textboxSearch_KeyDown</Event>
    </Object>
    <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="buttonSearch" children="Controls">
      <Property name="Anchor">Top, Right</Property>
      <Property name="Location">496, 13</Property>
      <Property name="Name">buttonSearch</Property>
      <Property name="Size">75, 23</Property>
      <Property name="TabIndex">1</Property>
      <Property name="Text">&amp;Search</Property>
      <Property name="UseVisualStyleBackColor">True</Property>
      <Event name="Click">buttonSearch_Click</Event>
    </Object>
    <Object type="System.Windows.Forms.DataGridView, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="datagridviewResults" children="Controls">
      <Property name="AllowUserToAddRows">False</Property>
      <Property name="AllowUserToDeleteRows">False</Property>
      <Property name="Anchor">Top, Bottom, Left, Right</Property>
      <Property name="Location">12, 42</Property>
      <Property name="Name">datagridviewResults</Property>
      <Property name="ReadOnly">True</Property>
      <Property name="Size">560, 279</Property>
      <Property name="TabIndex">2</Property>
      <Event name="ColumnHeaderMouseClick">datagridviewResults_ColumnHeaderMouseClick</Event>
    </Object>
    <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="buttonExit" children="Controls">
      <Property name="Anchor">Bottom, Right</Property>
      <Property name="Location">497, 327</Property>
      <Property name="Name">buttonExit</Property>
      <Property name="Size">75, 23</Property>
      <Property name="TabIndex">4</Property>
      <Property name="Text">E&amp;xit</Property>
      <Property name="UseVisualStyleBackColor">True</Property>
      <Event name="Click">buttonExit_Click</Event>
    </Object>
  </Object>
  <Object type="System.Windows.Forms.Timer, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="timerJobTracker">
    <Event name="Tick">timerJobTracker_Tick</Event>
  </Object>
  <Object type="System.Windows.Forms.ImageList, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="imagelistButtonBusyAnimation">
    <Property name="ImageStream">
      <Binary>AAEAAAD/////AQAAAAAAAAAMAgAAAFdTeXN0ZW0uV2luZG93cy5Gb3JtcywgVmVyc2lvbj00LjAu
MC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAA
ACZTeXN0ZW0uV2luZG93cy5Gb3Jtcy5JbWFnZUxpc3RTdHJlYW1lcgEAAAAERGF0YQcCAgAAAAkD
AAAADwMAAAB2CgAAAk1TRnQBSQFMAgEBCAEAAYABAAGAAQABEAEAARABAAT/ASEBAAj/AUIBTQE2
BwABNgMAASgDAAFAAwABMAMAAQEBAAEgBgABMP8A/wD/AP8A/wD/AP8A/wD/AP8A/wD/AP8A/wD/
AP8AugADwgH/AzUB/wM1Af8DwgH/MAADwgH/A1UB/wOCAf8DwgH/sAADNQH/AwAB/wMAAf8DNQH/
MAADggH/AzUB/wM1Af8DVQH/gAADwgH/AzUB/wM1Af8DwgH/IAADNQH/AwAB/wMAAf8DNQH/A8IB
/wNVAf8DggH/A8IB/xAAA8IB/wM1Af8DNQH/A8IB/wNVAf8DNQH/AzUB/wNVAf8EAAOSAf8DkgH/
A8IB/3AAAzUB/wMAAf8DAAH/AzUB/yAAA8IB/wM1Af8DNQH/A8IB/wOCAf8DNQH/AzUB/wOCAf8Q
AAM1Af8DAAH/AwAB/wM1Af8DwgH/A1UB/wOCAf8DwgH/A5IB/wOCAf8DggH/A5IB/3AAAzUB/wMA
Af8DAAH/AzUB/zAAA1UB/wM1Af8DNQH/A1UB/xAAAzUB/wMAAf8DAAH/AzUB/xAAA5IB/wOSAf8D
kgH/A8IB/3AAA8IB/wM1Af8DNQH/A8IB/zAAA8IB/wNVAf8DggH/A8IB/xAAA8IB/wM1Af8DNQH/
A8IB/xAAA8IB/wOSAf8DkgH/A8IB/zgAA8IB/wM1Af8DNQH/A8IB/zAAA8IB/wOCAf8DVQH/A8IB
/zAAA8IB/wPCAf8DkgH/A8IB/zQAA8IB/wPCAf80AAM1Af8DAAH/AwAB/wM1Af8wAANVAf8DNQH/
AzUB/wNVAf8wAAOSAf8DggH/A4IB/wOSAf8wAAPCAf8DwgH/A8IB/wPCAf8wAAM1Af8DAAH/AwAB
/wM1Af8wAAOCAf8DNQH/AzUB/wOCAf8wAAPCAf8DggH/A5IB/wOSAf8wAAPCAf8DwgH/A8IB/wPC
Af8wAAPCAf8DNQH/AzUB/wPCAf8wAAPCAf8DggH/A1UB/wPCAf8wAAPCAf8DkgH/A5IB/wPCAf80
AAPCAf8DwgH/EAADwgH/A8IB/xQAA8IB/wOCAf8DVQH/A8IB/zAAA8IB/wOSAf8DkgH/A8IB/zQA
A8IB/wPCAf9UAAPCAf8DwgH/A8IB/wPCAf8QAANVAf8DNQH/AzUB/wNVAf8wAAOSAf8DggH/A5IB
/wOSAf8wAAPCAf8DwgH/A8IB/wPCAf9QAAPCAf8DwgH/A8IB/wPCAf8DwgH/A8IB/wOSAf8DwgH/
A4IB/wM1Af8DNQH/A4IB/yQAA8IB/wPCAf8EAAPCAf8DggH/A5IB/wOSAf8wAAPCAf8DwgH/A8IB
/wPCAf9UAAPCAf8DwgH/BAADkgH/A4IB/wOCAf8DkgH/A8IB/wOCAf8DVQH/A8IB/yAAA8IB/wPC
Af8DwgH/A8IB/wPCAf8DkgH/A5IB/wPCAf80AAPCAf8DwgH/ZAADkgH/A5IB/wOSAf8DkgH/MAAD
wgH/A8IB/wPCAf8DwgH/sAADwgH/A5IB/wOSAf8DwgH/NAADwgH/A8IB/7QAA8IB/wPCAf8DkgH/
A8IB/zQAA8IB/wPCAf+0AAOSAf8DggH/A4IB/wOSAf8wAAPCAf8DwgH/A8IB/wPCAf+gAAPCAf8D
VQH/A4IB/wPCAf8DkgH/A5IB/wOSAf8DwgH/BAADwgH/A8IB/xQAA8IB/wPCAf8DkgH/A8IB/wPC
Af8DwgH/A8IB/wPCAf8kAAPCAf8DwgH/dAADggH/AzUB/wM1Af8DggH/A8IB/wOSAf8DkgH/A8IB
/wPCAf8DwgH/A8IB/wPCAf8QAAOSAf8DggH/A4IB/wOSAf8EAAPCAf8DwgH/JAADwgH/A8IB/wPC
Af8DwgH/cAADVQH/AzUB/wM1Af8DggH/EAADwgH/A8IB/wPCAf8DwgH/EAADkgH/A5IB/wOSAf8D
kgH/MAADwgH/A8IB/wPCAf8DwgH/cAADwgH/A1UB/wNVAf8DwgH/FAADwgH/A8IB/xQAA8IB/wOS
Af8DkgH/A8IB/zQAA8IB/wPCAf9sAAPCAf8DNQH/AzUB/wPCAf8wAAPCAf8DVQH/A4IB/wPCAf8w
AAPCAf8DwgH/A5IB/wPCAf80AAPCAf8DwgH/NAADNQH/AwAB/wMAAf8DNQH/MAADggH/AzUB/wM1
Af8DVQH/MAADkgH/A4IB/wOCAf8DkgH/MAADwgH/A8IB/wPCAf8DwgH/MAADNQH/AwAB/wMAAf8D
NQH/MAADVQH/AzUB/wM1Af8DggH/MAADkgH/A5IB/wOSAf8DkgH/MAADwgH/A8IB/wPCAf8DwgH/
MAADwgH/AzUB/wM1Af8DwgH/MAADwgH/A1UB/wNVAf8DwgH/MAADwgH/A5IB/wOSAf8DwgH/NAAD
wgH/A8IB/3wAA8IB/wM1Af8DNQH/A8IB/zAAA8IB/wNVAf8DggH/A8IB/zAAA8IB/wPCAf8DkgH/
A8IB/xAAA8IB/wM1Af8DNQH/A8IB/1AAAzUB/wMAAf8DAAH/AzUB/zAAA4IB/wM1Af8DNQH/A1UB
/zAAA5IB/wOCAf8DggH/A5IB/xAAAzUB/wMAAf8DAAH/AzUB/1AAAzUB/wMAAf8DAAH/AzUB/zAA
A1UB/wM1Af8DNQH/A4IB/wOSAf8DNQH/AzUB/wPCAf8gAAOSAf8DkgH/A5IB/wOSAf8DwgH/A1UB
/wOCAf8DwgH/AzUB/wMAAf8DAAH/AzUB/1AAA8IB/wM1Af8DNQH/A8IB/zAAA8IB/wOCAf8DVQH/
A8IB/wM1Af8DAAH/AwAB/wM1Af8gAAPCAf8DkgH/A5IB/wPCAf8DggH/AzUB/wM1Af8DVQH/A8IB
/wM1Af8DNQH/A8IB/6AAAzUB/wMAAf8DAAH/AzUB/zAAA1UB/wM1Af8DNQH/A4IB/7AAA8IB/wM1
Af8DNQH/A8IB/zAAA8IB/wOCAf8DVQH/A8IB/xgAAUIBTQE+BwABPgMAASgDAAFAAwABMAMAAQEB
AAEBBQABgAEBFgAD/4EABP8B/AE/AfwBPwT/AfwBPwH8AT8D/wHDAfwBAwHAASMD/wHDAfwBAwHA
AQMD/wHDAf8DwwP/AcMB/wPDAf8B8AH/AfAB/wHwAf8B+QH/AfAB/wHwAf8B8AH/AfAB/wHwAf8B
8AH/AfAB/wHwAf8B8AH/AfAB/wHwAf8B+QHnAcMB/wHDAf8B5wL/AsMB/wHDAf8BwwL/AcABAwH+
AUMB/wHDAv8B5AEDAfwBAwH/AecC/wH8AT8B/AE/BP8B/AE/Af4BfwT/AfwBPwH+AX8E/wH8AT8B
/AE/BP8BwAEnAcABPwHnA/8BwAEDAcIBfwHDA/8DwwH/AcMD/wHDAecBwwH/AecD/wEPAf8BDwH/
AQ8B/wGfAf8BDwH/AQ8B/wEPAf8BDwH/AQ8B/wEPAf8BDwH/AQ8B/wEPAf8BDwH/AQ8B/wGfA/8B
wwH/AcMB/wLDAv8BwwH/AcMB/wLDAv8BwwH/AcABPwHAAQMC/wHDAf8BwAE/AcABAwT/AfwBPwH8
AT8E/wH8AT8B/AE/Cw==</Binary>
    </Property>
    <Property name="TransparentColor">Transparent</Property>
  </Object>
  <Code><![CDATA[
#region Control Helper Functions
function Update-DataGridView
{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The DataGridView control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the DataGridView's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	.PARAMETER AutoSizeColumns
	    Resizes DataGridView control's columns after loading the items.
	#>
	Param (
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			[System.Windows.Forms.DataGridView]$DataGridView,
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			$Item,
			[Parameter(Mandatory = $false)]
			[string]$DataMember,
			[System.Windows.Forms.DataGridViewAutoSizeColumnMode]$AutoSizeColumns = 'None'
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
	{
		$DataGridView.DataSource = $Item.Tables[0]
	}
	elseif ($Item -is [System.ComponentModel.IListSource]`
			-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView])
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{
			$array.Add($Item)
		}
		$DataGridView.DataSource = $array
	}
	
	if ($AutoSizeColumns -ne 'None')
	{
		$DataGridView.AutoResizeColumns($AutoSizeColumns)
	}
	
	$DataGridView.ResumeLayout()
}

function ConvertTo-DataTable
{
	<#
		.SYNOPSIS
			Converts objects into a DataTable.
	
		.DESCRIPTION
			Converts objects into a DataTable, which are used for DataBinding.
	
		.PARAMETER  InputObject
			The input to convert into a DataTable.
	
		.PARAMETER  Table
			The DataTable you wish to load the input into.
	
		.PARAMETER RetainColumns
			This switch tells the function to keep the DataTable's existing columns.
		
		.PARAMETER FilterWMIProperties
			This switch removes WMI properties that start with an underline.
	
		.EXAMPLE
			$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
	#>
	[OutputType([System.Data.DataTable])]
	param (
			[ValidateNotNull()]
			$InputObject,
			[ValidateNotNull()]
			[System.Data.DataTable]$Table,
			[switch]$RetainColumns,
			[switch]$FilterWMIProperties)
	
	if ($null -eq $Table)
	{
		$Table = New-Object System.Data.DataTable
	}
	
	if ($InputObject -is [System.Data.DataTable])
	{
		$Table = $InputObject
	}
	elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
	{
		$Table = $InputObject.Tables[0]
	}
	else
	{
		if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
		{
			#Clear out the Table Contents
			$Table.Clear()
			
			if ($null -eq $InputObject) { return } #Empty Data
			
			$object = $null
			#find the first non null value
			foreach ($item in $InputObject)
			{
				if ($null -ne $item)
				{
					$object = $item
					break
				}
			}
			
			if ($null -eq $object) { return } #All null then empty
			
			#Get all the properties in order to create the columns
			foreach ($prop in $object.PSObject.Get_Properties())
			{
				if (-not $FilterWMIProperties -or -not $prop.Name.StartsWith('__')) #filter out WMI properties
				{
					#Get the type from the Definition string
					$type = $null
					
					if ($null -ne $prop.Value)
					{
						try { $type = $prop.Value.GetType() }
						catch { Out-Null }
					}
					
					if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
					{
						[void]$table.Columns.Add($prop.Name, $type)
					}
					else #Type info not found
					{
						[void]$table.Columns.Add($prop.Name)
					}
				}
			}
			
			if ($object -is [System.Data.DataRow])
			{
				foreach ($item in $InputObject)
				{
					$Table.Rows.Add($item)
				}
				return @( ,$Table)
			}
		}
		else
		{
			$Table.Rows.Clear()
		}
		
		foreach ($item in $InputObject)
		{
			$row = $table.NewRow()
			
			if ($item)
			{
				foreach ($prop in $item.PSObject.Get_Properties())
				{
					if ($table.Columns.Contains($prop.Name))
					{
						$row.Item($prop.Name) = $prop.Value
					}
				}
			}
			[void]$table.Rows.Add($row)
		}
	}
	
	return @( ,$Table)
}
#endregion

#region Search Function
function SearchGrid()
{
	$RowIndex = 0
	$ColumnIndex = 0
	$seachString = $textboxSearch.Text
	
	if($seachString -eq "")
	{
		return
	}
	
	if($datagridviewResults.SelectedCells.Count -ne 0)
	{
		$startCell = $datagridviewResults.SelectedCells[0];
		$RowIndex = $startCell.RowIndex
		$ColumnIndex = $startCell.ColumnIndex + 1
	}
	
	$columnCount = $datagridviewResults.ColumnCount
	$rowCount = $datagridviewResults.RowCount
	for(;$RowIndex -lt $rowCount; $RowIndex++)
	{
		$Row = $datagridviewResults.Rows[$RowIndex]
		
		for(;$ColumnIndex -lt $columnCount; $ColumnIndex++)
		{
			$cell = $Row.Cells[$ColumnIndex]
			
			if($null -ne $cell.Value -and $cell.Value.ToString().IndexOf($seachString, [StringComparison]::OrdinalIgnoreCase) -ne -1)
			{
				$datagridviewResults.CurrentCell = $cell
				return
			}
		}
		
		$ColumnIndex = 0
	}
	
	$datagridviewResults.CurrentCell = $null
	[void][System.Windows.Forms.MessageBox]::Show("The search has reached the end of the grid.","String not Found")
	
}
#endregion

$formMain_Load={
	#TODO: Initialize Form Controls here
	
}

$buttonExit_Click={
	#TODO: Place custom script here
	$formMain.Close()
}

$buttonSearch_Click={
	#TODO: Place custom script here
	SearchGrid
}

$datagridviewResults_ColumnHeaderMouseClick=[System.Windows.Forms.DataGridViewCellMouseEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellMouseEventArgs]
	if($datagridviewResults.DataSource -is [System.Data.DataTable])
	{
		$column = $datagridviewResults.Columns[$_.ColumnIndex]
		$direction = [System.ComponentModel.ListSortDirection]::Ascending
		
		if($column.HeaderCell.SortGlyphDirection -eq 'Descending')
		{
			$direction = [System.ComponentModel.ListSortDirection]::Descending
		}

		$datagridviewResults.Sort($datagridviewResults.Columns[$_.ColumnIndex], $direction)
	}
}

$formMain_FormClosed=[System.Windows.Forms.FormClosedEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.FormClosedEventArgs]
	#Stop any pending jobs
	Stop-JobTracker
}

$timerJobTracker_Tick={
	Update-JobTracker
}

#region Job Tracker
$JobTrackerList = New-Object System.Collections.ArrayList
function Add-JobTracker
{
	<#
		.SYNOPSIS
			Add a new job to the JobTracker and starts the timer.
	
		.DESCRIPTION
			Add a new job to the JobTracker and starts the timer.
	
		.PARAMETER  Name
			The name to assign to the Job
	
		.PARAMETER  JobScript
			The script block that the Job will be performing. 
			Important: Do not access form controls from this script block.
	
		.PARAMETER ArgumentList
			The arguments to pass to the job
	
		.PARAMETER  CompleteScript
			The script block that will be called when the job is complete.
			The job is passed as an argument. The Job argument is null when the job fails.
	
		.PARAMETER  UpdateScript
			The script block that will be called each time the timer ticks. 
			The job is passed as an argument. Use this to get the Job's progress.
	
		.EXAMPLE
			Add-JobTracker -Name 'JobName' `
			-JobScript {	
				Param($Argument1)#Pass any arguments using the ArgumentList parameter
				#Important: Do not access form controls from this script block.
				Get-WmiObject Win32_Process -Namespace "root\CIMV2"
			}`
			-CompletedScript {
				Param($Job)		
				$results = Receive-Job -Job $Job		
			}`
			-UpdateScript {
				Param($Job)
				#$results = Receive-Job -Job $Job -Keep
			}
	
		.LINK
			
	#>
	
	Param(
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	[string]$Name, 
	[ValidateNotNull()]
	[Parameter(Mandatory=$true)]
	[ScriptBlock]$JobScript,
	$ArgumentList = $null,
	[ScriptBlock]$CompletedScript,
	[ScriptBlock]$UpdateScript)
	
	#Start the Job
	$job = Start-Job -Name $Name -ScriptBlock $JobScript -ArgumentList $ArgumentList
	
	if($null -ne $job)
	{
		#Create a Custom Object to keep track of the Job & Script Blocks
		$members = @{	'Job' = $Job;
						'CompleteScript' = $CompletedScript;
						'UpdateScript' = $UpdateScript}
		
		$psObject = New-Object System.Management.Automation.PSObject -Property $members
		
		[void]$JobTrackerList.Add($psObject)	
		
		#Start the Timer
		if(-not $timerJobTracker.Enabled)
		{
			$timerJobTracker.Start()
		}
	}
	elseif($null -ne $CompletedScript)
	{
		#Failed
		Invoke-Command -ScriptBlock $CompletedScript -ArgumentList $null
	}

}

function Update-JobTracker
{
	<#
		.SYNOPSIS
			Checks the status of each job on the list.
	#>
	
	#Poll the jobs for status updates
	$timerJobTracker.Stop() #Freeze the Timer
	
	for($index =0; $index -lt $JobTrackerList.Count; $index++)
	{
		$psObject = $JobTrackerList[$index]
		
		if($null -ne $psObject) 
		{
			if($null -ne $psObject.Job)
			{
				if($psObject.Job.State -ne "Running")
				{				
					#Call the Complete Script Block
					if($null -ne $psObject.CompleteScript)
					{
						#$results = Receive-Job -Job $psObject.Job
						Invoke-Command -ScriptBlock $psObject.CompleteScript -ArgumentList $psObject.Job
					}
					
					$JobTrackerList.RemoveAt($index)
					Remove-Job -Job $psObject.Job
					$index-- #Step back so we don't skip a job
				}
				elseif($null -ne $psObject.UpdateScript)
				{
					#Call the Update Script Block
					Invoke-Command -ScriptBlock $psObject.UpdateScript -ArgumentList $psObject.Job
				}
			}
		}
		else
		{
			$JobTrackerList.RemoveAt($index)
			$index-- #Step back so we don't skip a job
		}
	}
	
	if($JobTrackerList.Count -gt 0)
	{
		$timerJobTracker.Start()#Resume the timer	
	}	
}

function Stop-JobTracker
{
	<#
		.SYNOPSIS
			Stops and removes all Jobs from the list.
	#>
	#Stop the timer
	$timerJobTracker.Stop()
	
	#Remove all the jobs
	while($JobTrackerList.Count -gt 0)
	{
		$job = $JobTrackerList[0].Job
		$JobTrackerList.RemoveAt(0)
		Stop-Job $job
		Remove-Job $job
	}
}
#endregion

$buttonStartJob_Click={
	
	$buttonStartJob.Enabled = $false	
	$buttonSearch.Enabled = $false
	#Create a New Job using the Job Tracker
	Add-JobTracker -Name 'JobName' `
	-JobScript {
   		#--------------------------------------------------
		#TODO: Set a script block
		#Important: Do not access form controls from this script block.
    
		Param($Argument1)#Pass any arguments using the ArgumentList parameter

		#	---------------------------------
		#	Sample Code to Load Sortable Data
		#	---------------------------------
		# 	Get-WmiObject Win32_Process -Namespace 'Root\CIMV2'
		
		#--------------------------------------------------
	}`
	-CompletedScript {
		Param($Job)
		
		#$results = Receive-Job -Job $Job 
		#$results = ConvertTo-DataTable -InputObject $results -FilterWMIProperties
		#Update-DataGridView -DataGridView $datagridviewResults -Item $results -AutoSizeColumns DisplayedCells
		
		#Enable the Button
		$buttonStartJob.ImageIndex = -1
		$buttonStartJob.Enabled = $true
		$buttonSearch.Enabled = $true
	}`
	-UpdateScript {
		Param($Job)
		#$results = Receive-Job -Job $Job -Keep
		#Animate the Button
		if($null -ne $buttonStartJob.ImageList)
		{
			if($buttonStartJob.ImageIndex -lt $buttonStartJob.ImageList.Images.Count - 1)
			{
				$buttonStartJob.ImageIndex += 1
			}
			else
			{
				$buttonStartJob.ImageIndex = 0		
			}
		}
	}
}

$textboxSearch_KeyDown=[System.Windows.Forms.KeyEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.KeyEventArgs]
	if($_.KeyCode -eq 'Enter' -and $buttonSearch.Enabled)
	{
		SearchGrid	
		$_.SuppressKeyPress = $true
	}
}
]]></Code>
  <Mode>0</Mode>
</File>