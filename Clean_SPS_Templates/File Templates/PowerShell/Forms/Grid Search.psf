<File version="2.1">
  <FileID>%Indentifier%</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAC5mSURBVHhe7d0JkJRlnufxnpiejd6N2NiI3Y2Y
iImNnp2JmZ6Jmd6+prunT9HWVlvH7rY9Wtv7QPEcT0AURUAQFRUQvPDgLKAKKOq+7/u+76Kq8qqs
+wK08fjt87xFKRSpcpUCz/cb8YmCrMw3880i6vm/b2ZRXyMiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
IiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiJytAKj+6/+6q+6v/Od/9d9
2y23dN9++2wAAHAGuPOOO7rPnTWr++tf/3r3X/zFX3SbNb3dW92/qL/8y78Mf/Ob39TVV12lFc+/
qNziarV193tau/oAAMBpqq1nQA1tPdq6PUY33XSTvvWP/yhzQK9DS/wX1n2VWfyjdyeoorVXOTVd
yqnuBAAAZ4Dsqk5VtIWVU1CuO2bP1je+8Y2Dh9b3z+//ffvb3c8sf16VZvHPrupQjmE/AgCA059d
tzMr21XV0a+o6N362U9/emwDwC233NKdXVil/Npu5ZpJAgAAnHmyKjvU2tOvBY89fmwDwOzZs7v3
BoeVZweAmr0AAOAMZF8KCAy+ZwaAJ459AOg2A4A9A5BnNgAAAM489v0Avr59mj9/wbEPAF3BIRXU
9ZghoAsAgFOusL5HJU0BlTbPnOJGv1nLur37sx+LG30Rr3eq2P0pbPh07fyy93E6exbA128HgMeO
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
xAAAAICDGAAAAHAQAwAAAA5iAAAAwEEMAAAAOIgBAAAABzEAAADgIAYAAAAcxAAAAICDGAAAAHAQ
AwAAAA5iAAAAwEEMAAAAOIgBAAAABzEAAADgIAYAAAAcxAAAAICDGAAAAHAQAwAAAA5iAAAAwEEM
AAAAOIgBAAAABzEAAADgIAYAAAAcxAAAAICDGAAAAHAQAwAAAA5iAAAAwEEMAAAAOIgBAAAABzEA
AADgIAYAAAAcxAAAAICDGAAAAHAQAwAAAA5iAAAAwEEMAAAAOIgBAAAABzEAAADgIAYAAAAcxAAA
AICDGAAAAHAQAwAAAA5iAAAAwEEMAAAAOIgBAAAABzEAAADgIAYAAAAcxAAAAICDGAAAAHAQAwAA
AA5iAAAAwEEMAAAAOIgBAAAABzEAAADgIAYAAAAcxAAAAICDGAAAAHAQAwAAAA5iAAAAwEEMAAAA
OIgBAAAABzEAAADgIAYAAAAcxAAAAICDGAAAAHAQAwAAAA5iAAAAwEEMAAAAOIgBAAAABzEAAADg
IAYAAAAcxAAAAICDGAAAAHAQAwAAAA5iAAAAwEEMAAAAOIgBAAAABzEAAADgIAYAAAAcxAAAAICD
GAAAAHAQAwAAAA5iAAAAwEEMAAAAOIgBAAAABzEAAADgIAYAAAAcxAAAAICDGAAAAHAQAwAAAA5i
AAAAwEEMAAAAOIgBAAAABzEAAADgIAYAAAAcxAAAAICDGAAAAHAQAwAAAA5iAAAAwEEMAAAAOIgB
AAAABzEAAADgIAYAAAAcxAAAAICDGAAAAHAQAwAAAA5iAAAAwEEMAAAAOIgBAAAABzEAAADgIAYA
AAAcxAAAAICDGAAAAHAQAwAAAA5iAAAAwEEMAAAAOIgBAAAABzEAAADgIAYAAAAcxAAAAICDGAAA
AHAQAwAAAA5iAAAAwEEMAAAAOIgBAAAABzEAAADgIAYAAAAcxAAAAICDGAAAAHAQAwAAAA5iAAAA
wEEMAAAAOIgBAAAABzEAAADgIAYAAAAcxAAAAICDGAAAAHAQAwAAAA5iAAAAwEEMAAAAOIgBAAAA
BzEAAADgIAYAAAAcxAAAAICDGAAAAHAQAwAAAA5iAAAAwEEMAAAAOIgBAAAABzEAAADgIAYAAAAc
xAAAAICDGAAAAHAQAwAAAA5iAAAAwEEMAAAAOIgBAAAABzEAAADgIAYAAAAcxAAAAICDGAAAAHDQ
GTsAJCYmKiYmBgAAnAC7nl5wwQVnzgBgJ5bvfe97io+P144dOwAAwAlISUnRrFmztGbNmtN/ADh4
8KCKior013/91/r+97+v7373uwAA4AT84Ac/0N/8zd9o8+bN+vjjjyOuu1O+8gFgbGxMQ0NDam1t
VV1dnerr6wEAwAmw62hLS4v6+/u99TXSujvlKx8ALPsg33vvPQAAcAqMj49HXG8Pd1oMAAAA4MvF
AAAAgINOmwHAvgwwMTHhlGM5RQMAOHH2+2yk779nsy967X/KafMeAPtGwEAgIL/f74ze3t6IzwcA
4OTZtaWvry/i99+z2eDg4DENAafFALB//361tbUpNjZWmZmZysjIOOvZn9W0///ByMjIMU9rAIBj
t2/fPuXk5CgpKSni9+GzjV0/9+zZo+rqah04cCDic3K402YAaGxsVG5urndUHGmiOZvYMx179+5V
enq6hoeHGQAAYAbY0+HZ2dlqampSMBiM+P34bGLXz9LSUpWXl59ZA4D9AtkBwH6Renp6zmo+n08d
HR3exMYAAAAzww4A9gyAPcC0C2Sk78dnE7t+lpSUqKKiwu0BwB8Mea/9WKHg6fWFZwAAgJk30wOA
L/DpOjMprKA/8nW/DAwAPT4FQ70KtFUqLTlZyckZqmztVqg3JF/E63/5GAAAYObN5ADg8/Wos7lG
+VnpSrFrTUqKUtLMetPc7X2P/+R63pDQ652eD/cG1NN99LZOFecHAL95snvrs7R89uX63qzzdP75
s3T9PatU0Og3g0HgtBgCGAAAYObN2ADgC2ow3KakVXfpO3//Xf3yV+dq1jnn6NyLf69XUjsUCk6u
NX4zJLTVFiopKUfFpUUqLG1UT9A/Y+uQ2wOAL6BQoFW75l6ji257VVUDIxrf16bt91ynPzy5VS29
wxod6pWvu1s9/pAGB/sUMItxMDyosYlxjU+MacBMaIFgr4ZGhjUyNqGJ0UGF/D3qNtvuGxxRf8in
7pOc4BgAAGDmzegAEGrQthfn67ZHoxU8YNaOcFjhvn6zdoxpuN+uY0ENm+/t3TWp2vz2Rr30zAI9
vDxF/fsH5bdrUKTtniSnBwB79L+3eofuvvI+7arrVl8oaBbzAfU2bdGNdyxV1LZNemNDpjr7wgo0
ZWjdK9Gqau9QZeI6zb72Gl1z7T16N7Na9ZUpen7RYs299Wr9ad5aFTSHNNBZo6jXFujtjGaz3ZP7
h8QAAAAzb8YHgJcW6I75OxV+f0Ijw6Ma8NXrraV3a/GmUo0M1eqthfdo8ep39OrLK3Tzef+qf/7J
ndpa1KTecHBGzgK4PQCYI/fO/Fd01R+XKaup02zL7x3dh1p26cFf3a5Hn7pXV93+hlpHRxQqf0NX
/2GBtsZu1bJbrtScp1frpYWzddXNi/XqC/fr59+5Qs+selwXfud3WhZdquaKKN3+82v0dk2X+k7y
TYUMAAAw82b6JYCEl+/Ut//uu5p1wfn61a/O12VXPKUXVt6na++8UU89Plt33Hirlj+/RH+4bLbu
vOEy/eaaZcpu3mvWppl5OZoBoGS9rr/yCaW1BDTYW6/CnELl7Vyta696UMuenaeb/3OD2keGFara
qDtvWqi1z92rH/yvv9NPL/6NfnPBL/Rv//YfemDBQ7r2tte094MPlbfiWt257FVFvfq4fj8/RsH+
k38zIQMAAMy8GR0AepsU89IjuuK6pdqTmarE+DglpVUpNNGj2EUX6r/+919oXW6HOnNf1523P6ln
Vzyl+c+nKjwxIP8MvRHQ6QHA5w/K31Wm1TdfoftfK9T4Qb/iVzyqS7/3Q12wZL1iXn1at9z6jgKS
3m/YpBtufEwrl/ynLvvlHCX4hjTQXaesmFhtfHWhrrvzDTUPT2iofK0uuuJ2/en31+mdinb1BgIR
7/t4MAAAwMyb2ZcA6hX10hO69+k0vW/WFJkDxo/0sf48WKk37j5P//N//0JP7ixQQ956zbnlMS1a
9Jjmr8zU4AHeA3CEU/cmQJ9CoaBa4tfoyl9foRsXLtbyBXN05Y9+psvuf1NxSZt0/7mX6c6lS7Xw
nt/qW+c+qB3ZO/XSfZfp5nue07PzbtP1Vz6u516cqz/cuEb1ff0aHGzWysv/Qf9w8ZOq6AkpGDj5
f0QMAAAw82ZyABgKNytmxWz96EdXat7TT+rxxxZo4VMLde+N/6Er73pGSfGrdOvlF+rOu+/WtTc9
pReWzNa5s+5UVHGjfOGZ+bF0twcAy+fXxPiougu3aN7DD+uRuc9oe/R2zZ2/VsVtzUrfskT3zJmj
u554Si+ui1eLGRjay+O09J45mnP344oualRjRYa2RGWpPdSn4dEOvXbdFZr3Toq6Q2Hvxzoi3u9x
YAAAgJk3YwNAj1+hYJdqMjbryQfv111z7tJdd92lOWZtue+RJdpRHpLUr/x3V2nlqvXasCtHZTlb
tOiBx/V2aqW6+0PyR9zuyXF6AJj6Av/puut14SW/1ZVXXqmrrrpCl132W53zy5/qtptv0eDoPu/+
JuyiO9znfRH8oX6Nmn8oE5/8GGBYgyMjGmnM0tN3z9L3Llqi/MaAentPzT8gBgAAmHkzNwD0eD8O
HggPatxbOyZ99NFHqq6u1GUXX6Bzz71Al/zuct144/UK+rvVNzCisUNrTA8vAXzqlL0HwCys9mNi
YqJ27tx5BPubBpOTkz+5zhfyBRTsbFRuarxSyxvl8wdO2cTGAAAAM28mB4BI7C96s/d1+Npjfzuf
/eVvx7z2nIQzegDIz8/3/j9luxMnY2hoyPs1u9PZyyNdP7KAAqFeDQwNa3jA/j6BSNc5MaFQyEyP
3QwAADCDpgaAlpYW77/ijfT9+FSyA4C9n8PXHfs9PtJ1Z4JdP8vKys7MASA+Pt77NYb21xme7QoK
CrwzFfYfCAMAAJx6+/bt8w607K8EtgtjpO/FZxO7fiYlJZ1Zvw54fHzcOyq2U4t94Pbj2czuo/3H
2NDQEPH5AACcPLu2tLa2et9vXVpb7MsB9uxHpOfkcKfFAGDZL5SdWFxiz3xEei4AAKeGPQsQ6fvv
2exYFn/rtBkAAADAl4cBAAAABzEAAADgIAYAAAAcxAAAAICDGAAAAHAQAwAAAA5iAAAAwEEzPgBM
mDuwdwIAAE4f+8ZH5ZuJAcBqDY570wUAADj9tIfsoj8DA4BlJwsAAHD6OXzxt07pAAAAAM4MDAAA
ADjoxAaA/gm1hA54NwYAAGeexsA+9U98dOwDwK233hYYmfhAQ/vkTQ4AAODMMzD+kd7/SJo3b/7H
h5b4z+/yy//QPm/eYwfNDQ7aqQEAAJyJ5h+c/9iCg1dfffX+Q0s8ERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERkWN97Wv/H31QX252
jfRrAAAAAElFTkSuQmCC</Preview>
  <Object type="System.Windows.Forms.Form, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="formMain" children="Controls">
    <Property name="AutoScaleDimensions">6, 13</Property>
    <Property name="AutoScaleMode">Font</Property>
    <Property name="ClientSize">584, 362</Property>
    <Property name="Name">formMain</Property>
    <Property name="StartPosition">CenterScreen</Property>
    <Property name="Text">Grid Search</Property>
    <Event name="Load">formMain_Load</Event>
    <Object type="System.Windows.Forms.TextBox, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="textboxSearch" children="Controls">
      <Property name="Anchor">Top, Left, Right</Property>
      <Property name="Location">13, 15</Property>
      <Property name="Name">textboxSearch</Property>
      <Property name="Size">477, 20</Property>
      <Property name="TabIndex">0</Property>
      <Event name="KeyDown">textboxSearch_KeyDown</Event>
    </Object>
    <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="buttonSearch" children="Controls">
      <Property name="Anchor">Top, Right</Property>
      <Property name="Location">496, 13</Property>
      <Property name="Name">buttonSearch</Property>
      <Property name="Size">75, 23</Property>
      <Property name="TabIndex">1</Property>
      <Property name="Text">&amp;Search</Property>
      <Property name="UseVisualStyleBackColor">True</Property>
      <Event name="Click">buttonSearch_Click</Event>
    </Object>
    <Object type="System.Windows.Forms.DataGridView, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="datagridviewResults" children="Controls">
      <Property name="AllowUserToAddRows">False</Property>
      <Property name="AllowUserToDeleteRows">False</Property>
      <Property name="Anchor">Top, Bottom, Left, Right</Property>
      <Property name="Location">12, 42</Property>
      <Property name="Name">datagridviewResults</Property>
      <Property name="ReadOnly">True</Property>
      <Property name="Size">560, 279</Property>
      <Property name="TabIndex">2</Property>
      <Event name="ColumnHeaderMouseClick">datagridviewResults_ColumnHeaderMouseClick</Event>
    </Object>
    <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="buttonExit" children="Controls">
      <Property name="Anchor">Bottom, Right</Property>
      <Property name="Location">497, 327</Property>
      <Property name="Name">buttonExit</Property>
      <Property name="Size">75, 23</Property>
      <Property name="TabIndex">4</Property>
      <Property name="Text">E&amp;xit</Property>
      <Property name="UseVisualStyleBackColor">True</Property>
      <Event name="Click">buttonExit_Click</Event>
    </Object>
    <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="buttonQuery" children="Controls">
      <Property name="Anchor">Bottom, Left</Property>
      <Property name="Location">12, 327</Property>
      <Property name="Name">buttonQuery</Property>
      <Property name="Size">75, 23</Property>
      <Property name="TabIndex">3</Property>
      <Property name="Text">&amp;Query</Property>
      <Property name="UseVisualStyleBackColor">True</Property>
      <Event name="Click">buttonQuery_Click</Event>
    </Object>
  </Object>
  <Code><![CDATA[

#region Control Helper Functions
function Update-DataGridView
{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The DataGridView control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the DataGridView's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	.PARAMETER AutoSizeColumns
	    Resizes DataGridView control's columns after loading the items.
	#>
	Param (
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			[System.Windows.Forms.DataGridView]$DataGridView,
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			$Item,
			[Parameter(Mandatory = $false)]
			[string]$DataMember,
			[System.Windows.Forms.DataGridViewAutoSizeColumnMode]$AutoSizeColumns = 'None'
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
	{
		$DataGridView.DataSource = $Item.Tables[0]
	}
	elseif ($Item -is [System.ComponentModel.IListSource]`
			-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView])
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{
			$array.Add($Item)
		}
		$DataGridView.DataSource = $array
	}
	
	if ($AutoSizeColumns -ne 'None')
	{
		$DataGridView.AutoResizeColumns($AutoSizeColumns)
	}
	
	$DataGridView.ResumeLayout()
}

function ConvertTo-DataTable
{
	<#
		.SYNOPSIS
			Converts objects into a DataTable.
	
		.DESCRIPTION
			Converts objects into a DataTable, which are used for DataBinding.
	
		.PARAMETER  InputObject
			The input to convert into a DataTable.
	
		.PARAMETER  Table
			The DataTable you wish to load the input into.
	
		.PARAMETER RetainColumns
			This switch tells the function to keep the DataTable's existing columns.
		
		.PARAMETER FilterWMIProperties
			This switch removes WMI properties that start with an underline.
	
		.EXAMPLE
			$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
	#>
	[OutputType([System.Data.DataTable])]
	param (
			[ValidateNotNull()]
			$InputObject,
			[ValidateNotNull()]
			[System.Data.DataTable]$Table,
			[switch]$RetainColumns,
			[switch]$FilterWMIProperties)
	
	if ($null -eq $Table)
	{
		$Table = New-Object System.Data.DataTable
	}
	
	if ($InputObject -is [System.Data.DataTable])
	{
		$Table = $InputObject
	}
	elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
	{
		$Table = $InputObject.Tables[0]
	}
	else
	{
		if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
		{
			#Clear out the Table Contents
			$Table.Clear()
			
			if ($null -eq $InputObject) { return } #Empty Data
			
			$object = $null
			#find the first non null value
			foreach ($item in $InputObject)
			{
				if ($null -ne $item)
				{
					$object = $item
					break
				}
			}
			
			if ($null -eq $object) { return } #All null then empty
			
			#Get all the properties in order to create the columns
			foreach ($prop in $object.PSObject.Get_Properties())
			{
				if (-not $FilterWMIProperties -or -not $prop.Name.StartsWith('__')) #filter out WMI properties
				{
					#Get the type from the Definition string
					$type = $null
					
					if ($null -ne $prop.Value)
					{
						try { $type = $prop.Value.GetType() }
						catch { Out-Null }
					}
					
					if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
					{
						[void]$table.Columns.Add($prop.Name, $type)
					}
					else #Type info not found
					{
						[void]$table.Columns.Add($prop.Name)
					}
				}
			}
			
			if ($object -is [System.Data.DataRow])
			{
				foreach ($item in $InputObject)
				{
					$Table.Rows.Add($item)
				}
				return @( ,$Table)
			}
		}
		else
		{
			$Table.Rows.Clear()
		}
		
		foreach ($item in $InputObject)
		{
			$row = $table.NewRow()
			
			if ($item)
			{
				foreach ($prop in $item.PSObject.Get_Properties())
				{
					if ($table.Columns.Contains($prop.Name))
					{
						$row.Item($prop.Name) = $prop.Value
					}
				}
			}
			[void]$table.Rows.Add($row)
		}
	}
	
	return @( ,$Table)
}
#endregion

#region Search Function
function SearchGrid()
{
	$RowIndex = 0
	$ColumnIndex = 0
	$seachString = $textboxSearch.Text
	
	if($seachString -eq "")
	{
		return
	}
	
	if($datagridviewResults.SelectedCells.Count -ne 0)
	{
		$startCell = $datagridviewResults.SelectedCells[0];
		$RowIndex = $startCell.RowIndex
		$ColumnIndex = $startCell.ColumnIndex + 1
	}
	
	$columnCount = $datagridviewResults.ColumnCount
	$rowCount = $datagridviewResults.RowCount
	for(;$RowIndex -lt $rowCount; $RowIndex++)
	{
		$Row = $datagridviewResults.Rows[$RowIndex]
		
		for(;$ColumnIndex -lt $columnCount; $ColumnIndex++)
		{
			$cell = $Row.Cells[$ColumnIndex]
			
			if($null -ne $cell.Value -and $cell.Value.ToString().IndexOf($seachString, [StringComparison]::OrdinalIgnoreCase) -ne -1)
			{
				$datagridviewResults.CurrentCell = $cell
				return
			}
		}
		
		$ColumnIndex = 0
	}
	
	$datagridviewResults.CurrentCell = $null
	[void][System.Windows.Forms.MessageBox]::Show("The search has reached the end of the grid.","String not Found")
	
}
#endregion

$formMain_Load={
	#TODO: Initialize Form Controls here
	
}

$buttonExit_Click={
	#TODO: Place custom script here
	$formMain.Close()
}

$buttonQuery_Click= {
	#TODO: Place custom script here
	#	---------------------------------
	#	Sample Code to Load Grid
	#	---------------------------------
	#	$processes = Get-WmiObject Win32_Process -Namespace 'Root\CIMV2'
	#	Update-DataGridView -DataGridView $datagridviewResults -Item $processes -AutoSizeColumns DisplayedCells
	#	---------------------------------
	#	Sample Code to Load Sortable Data
	#	---------------------------------
	# 	$processes = Get-WmiObject Win32_Process -Namespace 'Root\CIMV2'
	#	$table = ConvertTo-DataTable -InputObject $processes -FilterWMIProperties
	#	Update-DataGridView -DataGridView $datagridviewResults -Item $table -AutoSizeColumns DisplayedCells
}

$buttonSearch_Click={
	#TODO: Place custom script here
	SearchGrid
}

$datagridviewResults_ColumnHeaderMouseClick=[System.Windows.Forms.DataGridViewCellMouseEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellMouseEventArgs]
	if($datagridviewResults.DataSource -is [System.Data.DataTable])
	{
		$column = $datagridviewResults.Columns[$_.ColumnIndex]
		$direction = [System.ComponentModel.ListSortDirection]::Ascending
		
		if($column.HeaderCell.SortGlyphDirection -eq 'Descending')
		{
			$direction = [System.ComponentModel.ListSortDirection]::Descending
		}

		$datagridviewResults.Sort($datagridviewResults.Columns[$_.ColumnIndex], $direction)
	}
}

$textboxSearch_KeyDown=[System.Windows.Forms.KeyEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.KeyEventArgs]
	if($_.KeyCode -eq 'Enter' -and $buttonSearch.Enabled)
	{
		SearchGrid	
		$_.SuppressKeyPress = $true
	}
}
]]></Code>
  <Mode>0</Mode>
</File>