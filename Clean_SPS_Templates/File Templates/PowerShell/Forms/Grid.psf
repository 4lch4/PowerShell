<File version="2.1">
  <FileID>%Indentifier%</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAACR1SURBVHhe7d0JbN3nfefrFm0HnQsMBhhc3ALF
oLgzuM0EnU7TFkkznXRqJ/HttJ3JTNs4meyb9yTNTepN3uI9tmzLa7xvsSVbuyVr3ylKlESKoiiJ
FEVqpSju2hc7sR37d9/3T8nWwiZeJEfy+3yAB7RpnkMeytD7PQulX5MkSZIkSZIkSZIkSZIkSZIk
SZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIk
SZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIk
SZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIk
SZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIkSZIk
SZIkSZIkSZIkSZIkSZIkSZIKrS7p/K3f+q3OP/qj/9R53je/2Xn++RcAAGeAiy68sPPss87q/M3f
/M3OX//1X+9MZ/qm6nT/Zf3Gb/xG/+/93u/F5z/3uRh5591Ru6I5NnYOVjq2DQAAp6mN23dG68bt
8fz4SfH1r389PvT7vx/pDn0cPuJ/aZ2fS4f/xCkzYlVHXyxesy0WN28BAM4ANau3xKqN/bG4rjEu
vOCC+O3f/u1XD5/vv7j/9Id/2HnrbXdGUzr8a1ZvjsVJfgsAnP7yub2waVOs3jwYYydOif/y53/+
9gbAN7/5zc6aZatj6drOqE1LAgA48yxq2hwd2wfj6quueXsD4IILLujc2rMnluQBsGYrAHAGyk8F
dO/6aRoA1779AdCZBkB+BGBJugIA4MyTXw/QNXAoRoy4+u0PgG09u6Nu3fY0ArYBwEm3rGV71Ld1
R8OGU2fF+h3pLOusPl9+u2J917Afd7Lk27Os9a2z8/2+jcfLjwJ0DeYBcNU7GQB70hfeVV0pAJxM
+WCcX78hnplcG0+MWxhPjF908qXrnThnZSxdM3QQ5wNx8tzGoc83bpiPf6/S9f5kUm3MXd5WjYDl
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
hXHjxsXHP/7xuP/++yM33Ll7xGkxAObNm1fd+58zZ0688MILAMC7sHDhwjjnnHPiwQcfPHMGQH7o
YsaMGTFx4kQA4F3Ij6h/+tOfNgAAoCQGAAAUyAAAgAIZAABQIAMAAApkAABAgQwAACiQAQAABTIA
AKBABgAAFMgAAIACGQAAUCADAAAKZAAAQIEMAAAokAEAAAUyAACgQAYAABTIAACAAhkAAFAgAwAA
CmQAAECBDAAAKJABAAAFMgAAoEAGAAAUyAAAgAIZAABQIAMAAApkAABAgQwAACiQAQAABTIAAKBA
BgAAFMgAAIACGQAAUCADAAAKZAAAQIEMAAAokAEAAAUyAACgQAYAABTIAACAAhkAAFAgAwAACmQA
AECBDAAAKJABAAAFMgAAoEAGAAAUyAAAgAIZAABQIAMAAApkAABAgQwAACiQAQAABTIAAKBABgAA
FMgAAIACGQAAUCADAAAKZAAAQIEMAAAokAEAAAUyAACgQAYAABTIAACAAhkAAFAgAwAACmQAAECB
DAAAKJABAAAFMgAAoEAGAAAUyAAAgAIZAABQIAMAAApkAABAgQwAACiQAQAABTIAAKBABgAAFMgA
AIACGQAAUCADAAAKZAAAQIEMAAAokAEAAAUyAACgQAYAABTIAACAAhkAAFAgAwAACmQAAECBDAAA
KJABAAAFMgAAoEAGAAAUyAAAgAIZAABQIAMAAApkAABAgQwAACiQAQAABTIAAKBABgAAFMgAAIAC
GQAAUCADAAAKZAAAQIEMAAAokAEAAAUyAACgQAYAABTIAACAAhkAAFAgAwAACmQAAECBDAAAKJAB
AAAFMgAAoEAGAAAUyAAAgAIZAABQIAMAAApkAABAgQwAACiQAQAABTIAAKBABgAAFMgAAIACGQAA
UCADAAAKZAAAQIEMAAAokAEAAAUyAACgQAYAABTIAACAAhkAAFAgAwAACmQAAECBDAAAKJABAAAF
MgAAoEAGAAAUyAAAgAIZAABQIAMAAApkAABAgQwAACiQAQAABTIAAKBABgAAFMgAAIACGQAAUCAD
AAAKZAAAQIEMAAAokAEAAAUyAACgQAYAABTIAACAAhkAAFAgAwAACmQAAECBDAAAKJABAAAFMgAA
oEAGAAAUyAAAgAIZAABQIAMAAApkAABAgQwAACiQAQAABTIAAKBABgAAFMgAAIACGQAAUCADAAAK
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
PHrFl+I/n/WVuPqm6+OHN9wSdzw8Kq7/8l/GZ78zMi79+rnx+TtHx7I5z8X3P/m/4pLbb49bzv+r
+L8+flGMmT857jz/7Pi7i2+PK9Pbf/vHX4nnlndE/4ABAHCmOJUDYHf/hpg08oL42MfOjStv/GFc
c9XVcd3118V3v/Y/4txLbo1Z0++Lb/39X8VF3/52fPHr18ddN18QZ591UYxdsT66+ns9BXDEyR4A
ndt3xEDftli38Pm4+ZoRcdmll8all10d901viLXzx8QV374ovn3tE9GwqS92922OeWNuju9efHFc
/N3vx4i7xkfL9q5Yv2RcXPWdi+OSa34Yd/54SjRv2BI78h8qNMzne6cMAIBT75QNgHTG9PZsizUL
xsQPf/C9uOTiS+KSSy6Ji9M58o+X3RwTGnsjYjCW/uS+GHXfE/HMC4tj5eLn4obvXxNPzW2KzsHe
d/Wj6b+MAZDkP5GppqY2/tvf/s/47LnnxrmVz8b3Lrkw+nfujUPp8x3cvzv6dgyNhf5dR/1VxPt2
Rnc6oKsfA8z/ng/nvYPRk/8woZP0vI0BAHDqnboBkM6OIz8ufuTsSF5//fVobm6Kz/z1OXH22efE
3/6vv4+vfe0r6fzojIF09uw/uD92Vn8YkKcA3nSyB0D+y3by9U2ePPkYs2fPrg7f4S7zfjIAAE69
UzkAhpPPnvy5jj538t/Ol//yt/fj7DmjB8DSpUure+/5RrwX+Rch/7GL+a/aPdru3buH/fj3W29v
b1qPnQYAwCl0ZAC0t7dXZ8Jwvx+fTMOdPfn3+OE+9lTI5+fKlSvPzAEwffr06q8xzH+d4QddXV1d
zJw5s/ofxAAAOPkOHTpU3dHKfyVwPhiH+734gySfn7NmzTqz/jrg/Mfw5nvFebXkLzy//SDLtzH/
z9ja2jrs9wOA9y6fLR0dHdXvtyWdLfnpgPzox3Dfk6OdFgMgy79QebGUJD/yMdz3AoCTIz8KMNzv
vx9kb+fwz06bAQAAvH8MAAAokAEAAAUyAACgQAYAABTIAACAAhkAAFAgAwAACnTKB8DB9AnyJwEA
Th+HDuyLrlMxALKOngPVugAATj+bevOhfwoGQJaXBQBw+jn68M9O6gAAAM4MBgAAFOjdDYDBg9He
+3J1YQDgzLO++1AMHnz97Q+Ab33rvO69B1+L3YeiWg4AwJln54HX42evR1x55Yg3Dh/xv7i///t/
2HTllVe9mi7wal4NAMCZaMSrI666+tXPf/7zLx0+4iVJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJ
kiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJ
kiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJ
kiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJ
kiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJkiRJ
kiRJkiRJkqTC+rVf+/8BPRUNIqC537cAAAAASUVORK5CYII=</Preview>
  <Object type="System.Windows.Forms.Form, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="formMain" children="Controls">
    <Property name="AutoScaleDimensions">6, 13</Property>
    <Property name="AutoScaleMode">Font</Property>
    <Property name="ClientSize">584, 362</Property>
    <Property name="Name">formMain</Property>
    <Property name="StartPosition">CenterScreen</Property>
    <Property name="Text">Grid</Property>
    <Event name="Load">formMain_Load</Event>
    <Object type="System.Windows.Forms.DataGridView, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="datagridviewResults" children="Controls">
      <Property name="AllowUserToAddRows">False</Property>
      <Property name="AllowUserToDeleteRows">False</Property>
      <Property name="Anchor">Top, Bottom, Left, Right</Property>
      <Property name="Location">12, 12</Property>
      <Property name="Name">datagridviewResults</Property>
      <Property name="ReadOnly">True</Property>
      <Property name="Size">560, 309</Property>
      <Property name="TabIndex">2</Property>
      <Event name="ColumnHeaderMouseClick">datagridviewResults_ColumnHeaderMouseClick</Event>
    </Object>
    <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="buttonExit" children="Controls">
      <Property name="Anchor">Bottom, Right</Property>
      <Property name="Location">497, 327</Property>
      <Property name="Name">buttonExit</Property>
      <Property name="Size">75, 23</Property>
      <Property name="TabIndex">1</Property>
      <Property name="Text">E&amp;xit</Property>
      <Property name="UseVisualStyleBackColor">True</Property>
      <Event name="Click">buttonExit_Click</Event>
    </Object>
    <Object type="System.Windows.Forms.Button, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" name="buttonLoad" children="Controls">
      <Property name="Anchor">Bottom, Left</Property>
      <Property name="Location">12, 327</Property>
      <Property name="Name">buttonLoad</Property>
      <Property name="Size">75, 23</Property>
      <Property name="TabIndex">0</Property>
      <Property name="Text">&amp;Load</Property>
      <Property name="UseVisualStyleBackColor">True</Property>
      <Event name="Click">buttonLoad_Click</Event>
    </Object>
  </Object>
  <Code><![CDATA[
#region Control Helper Functions
function Update-DataGridView
{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The DataGridView control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the DataGridView's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	.PARAMETER AutoSizeColumns
	    Resizes DataGridView control's columns after loading the items.
	#>
	Param (
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			[System.Windows.Forms.DataGridView]$DataGridView,
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			$Item,
			[Parameter(Mandatory = $false)]
			[string]$DataMember,
			[System.Windows.Forms.DataGridViewAutoSizeColumnMode]$AutoSizeColumns = 'None'
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
	{
		$DataGridView.DataSource = $Item.Tables[0]
	}
	elseif ($Item -is [System.ComponentModel.IListSource]`
			-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView])
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{
			$array.Add($Item)
		}
		$DataGridView.DataSource = $array
	}
	
	if ($AutoSizeColumns -ne 'None')
	{
		$DataGridView.AutoResizeColumns($AutoSizeColumns)
	}
	
	$DataGridView.ResumeLayout()
}

function ConvertTo-DataTable
{
	<#
		.SYNOPSIS
			Converts objects into a DataTable.
	
		.DESCRIPTION
			Converts objects into a DataTable, which are used for DataBinding.
	
		.PARAMETER  InputObject
			The input to convert into a DataTable.
	
		.PARAMETER  Table
			The DataTable you wish to load the input into.
	
		.PARAMETER RetainColumns
			This switch tells the function to keep the DataTable's existing columns.
		
		.PARAMETER FilterWMIProperties
			This switch removes WMI properties that start with an underline.
	
		.EXAMPLE
			$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
	#>
	[OutputType([System.Data.DataTable])]
	param (
			[ValidateNotNull()]
			$InputObject,
			[ValidateNotNull()]
			[System.Data.DataTable]$Table,
			[switch]$RetainColumns,
			[switch]$FilterWMIProperties)
	
	if ($null -eq $Table)
	{
		$Table = New-Object System.Data.DataTable
	}
	
	if ($InputObject -is [System.Data.DataTable])
	{
		$Table = $InputObject
	}
	elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
	{
		$Table = $InputObject.Tables[0]
	}
	else
	{
		if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
		{
			#Clear out the Table Contents
			$Table.Clear()
			
			if ($null -eq $InputObject) { return } #Empty Data
			
			$object = $null
			#find the first non null value
			foreach ($item in $InputObject)
			{
				if ($null -ne $item)
				{
					$object = $item
					break
				}
			}
			
			if ($null -eq $object) { return } #All null then empty
			
			#Get all the properties in order to create the columns
			foreach ($prop in $object.PSObject.Get_Properties())
			{
				if (-not $FilterWMIProperties -or -not $prop.Name.StartsWith('__')) #filter out WMI properties
				{
					#Get the type from the Definition string
					$type = $null
					
					if ($null -ne $prop.Value)
					{
						try { $type = $prop.Value.GetType() }
						catch { Out-Null }
					}
					
					if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
					{
						[void]$table.Columns.Add($prop.Name, $type)
					}
					else #Type info not found
					{
						[void]$table.Columns.Add($prop.Name)
					}
				}
			}
			
			if ($object -is [System.Data.DataRow])
			{
				foreach ($item in $InputObject)
				{
					$Table.Rows.Add($item)
				}
				return @( ,$Table)
			}
		}
		else
		{
			$Table.Rows.Clear()
		}
		
		foreach ($item in $InputObject)
		{
			$row = $table.NewRow()
			
			if ($item)
			{
				foreach ($prop in $item.PSObject.Get_Properties())
				{
					if ($table.Columns.Contains($prop.Name))
					{
						$row.Item($prop.Name) = $prop.Value
					}
				}
			}
			[void]$table.Rows.Add($row)
		}
	}
	
	return @( ,$Table)
}
#endregion

$formMain_Load={
	#TODO: Initialize Form Controls here
	
}

$buttonExit_Click={
	#TODO: Place custom script here
	$formMain.Close()
}

$buttonLoad_Click= {
	#TODO: Place custom script here
	#	---------------------------------
	#	Sample Code to Load Grid
	#	---------------------------------
	#	$processes = Get-WmiObject Win32_Process -Namespace "Root\CIMV2"
	#	Update-DataGridView -DataGridView $datagridviewResults -Item $processes -AutoSizeColumns DisplayedCells
	#	---------------------------------
	#	Sample Code to Load Sortable Data
	#	---------------------------------
	# 	$processes = Get-WmiObject Win32_Process -Namespace "Root\CIMV2"
	#	$table = ConvertTo-DataTable -InputObject $processes -FilterWMIProperties
	#	Update-DataGridView -DataGridView $datagridviewResults -Item $table -AutoSizeColumns DisplayedCells
}

$datagridviewResults_ColumnHeaderMouseClick=[System.Windows.Forms.DataGridViewCellMouseEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellMouseEventArgs]
	if($datagridviewResults.DataSource -is [System.Data.DataTable])
	{
		$column = $datagridviewResults.Columns[$_.ColumnIndex]
		$direction = [System.ComponentModel.ListSortDirection]::Ascending
		
		if($column.HeaderCell.SortGlyphDirection -eq 'Descending')
		{
			$direction = [System.ComponentModel.ListSortDirection]::Descending
		}

		$datagridviewResults.Sort($datagridviewResults.Columns[$_.ColumnIndex], $direction)
	}
}
]]></Code>
  <Mode>0</Mode>
</File>