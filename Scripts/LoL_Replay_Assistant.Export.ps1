#------------------------------------------------------------------------
# Source File Information (DO NOT MODIFY)
# Source ID: 06167130-ac0f-4c8f-a728-8345ae745b0d
# Source File: LoL_Replay_Assistant.psf
#------------------------------------------------------------------------
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
7BcAAB+LCAAAAAAABADNWF1v4joQfV9p/0OUZwQkfLVXEKnAVqqWbhGwu/etMsnQeuvYyHHaZn/9
tfNRKAmJ6QVUVapIMuM5M+eMM05/Bi57Bh6NkUCG/BFgRgemXbdM5+sXw+jfcfyAKSLXmMAP5IMz
YZP7GawJiu6vggAHAlFRXwerfiNnmiyw/AOuMES0hoE5jwIBfv03ph57CerXjPvJ/5pR9Khm/EoR
tetN9VczRiERIYcBhVBwRGrGNFwS7H6HaMGegA6WvR7quJ2uddlqQ/Pi0jSohDIwV3I9yzTcR0w8
Lu3MEaOCMxIkeUqgU87WwEWUOlyFgs1dRGCMfaAKhDTt1gyr1W9kplWut8wD07mWkSp9RgQDFXP8
VzrYF20Vx6p0ukWY3gIN54LjdZaINJvBCmSSLqR2MoEwUDayAo1srcrFMcV+6CeQWk1Ze6vXrPRS
xJtOXO1K2wW8ClUe7udNvz3LcqR2E4a8dM179bvfiJ9mptUKG4ZCMHpyjS3jMFPZGmVCK9ALdR8Z
N50hk/6yFWb44TGvmLzfhLlISOSmY132asZFXpn7+Nkg1XBJFNDr1AxbJ8ICLW+oB69SNDrWsQY0
kfwM4BcOQkTmIiIwRO7TiBFVuQUPoch/W0Wyw9yn7dTv4zs7Ymokavqk2hpyuTb8P3VNYHWguOwP
aCtBekp12drq0sZyPH0lIY+jMJXEkL2eXGJCxlmy19K35H55Ldg60daH9i8psXb+5bJPYhlSDYcZ
IO+Okmg/h4V6tLuykLYOoo0gC154B3M9QUsgJ2eaqCjJEKeGtQMJV9NNXCTNir6n2W5r07wDU5u8
rl04ppVxp8V0vJkkeAwF6J8jEP42vp2c9O0h8BC+bySorcfSQN0p3bAYI3FOKjllfLrctmAVzL0r
SVIOzGYEThhT9zbJHyJnCVh/z9qUX38TUucArX7ZCFnLOhZyCaB3Mn5/Ua3ouzVQ1R1jjAh7OLms
JXCqePbicNa+41x2KDWdHYed5A/N9oxaLxX1nrTH8nLMXuhOE3/SFs41MFG9BhM2uaGBQISUNvO7
VtY9qBYVs9I3PRP3CkeEPafc/Avs80utuvylxa101yy01VWng/y8X1zpeH8GQ4Y10rjlXxfSub0S
bH6YLyPwanrz7cdC/lasEA94ciLg6pMQp9neOGUvwOePQIgxF6GH2Ya8Tr1Vt1pa9NGQkM13LhVs
mQTz42DZzpi2Sv8qCMCXC0CQlSO9Ezl+4DJO8PIIGuo33lbdjZKo9hwxjt4Z1RHVh9TzBOLoBdOH
j8RqtladVW9lWV6niVqoOta/PjlPTpjLHmI8mgN/xi58iLKDsxsxDmdJL81K7kYytRPk9naZ9Ha/
sf113/kPNvebguwXAAA=#>
#endregion

<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2016 v5.3.130
     Generated on:       12/3/2016 4:46 AM
     Generated by:       DevinL
     Organization:       SAPIEN Technologies, Inc.
    --------------------------------------------------------------------------------
    .DESCRIPTION
        GUI script generated by PowerShell Studio 2016
#>
#----------------------------------------------
#region Application Functions
#----------------------------------------------

#endregion Application Functions

#----------------------------------------------
# Generated Form Function
#----------------------------------------------
function Show-LoL_Replay_Assistant_psf {

	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.ServiceProcess, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Define SAPIEN Types
	#----------------------------------------------
	try{
		[FolderBrowserModernDialog] | Out-Null
	}
	catch
	{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms') -TypeDefinition  @" 
		using System;
		using System.Windows.Forms;
		using System.Reflection;

        namespace SAPIENTypes
        {
		    public class FolderBrowserModernDialog : System.Windows.Forms.CommonDialog
            {
                private System.Windows.Forms.OpenFileDialog fileDialog;
                public FolderBrowserModernDialog()
                {
                    fileDialog = new System.Windows.Forms.OpenFileDialog();
                    fileDialog.Filter = "Folders|\n";
                    fileDialog.AddExtension = false;
                    fileDialog.CheckFileExists = false;
                    fileDialog.DereferenceLinks = true;
                    fileDialog.Multiselect = false;
                    fileDialog.Title = "Select a folder";
                }

                public string Title
                {
                    get { return fileDialog.Title; }
                    set { fileDialog.Title = value; }
                }

                public string InitialDirectory
                {
                    get { return fileDialog.InitialDirectory; }
                    set { fileDialog.InitialDirectory = value; }
                }
                
                public string SelectedPath
                {
                    get { return fileDialog.FileName; }
                    set { fileDialog.FileName = value; }
                }

                object InvokeMethod(Type type, object obj, string method, object[] parameters)
                {
                    MethodInfo methInfo = type.GetMethod(method, BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic);
                    return methInfo.Invoke(obj, parameters);
                }

                bool ShowOriginalBrowserDialog(IntPtr hwndOwner)
                {
                    FolderBrowserDialog folderBrowserDialog = new FolderBrowserDialog();
                    folderBrowserDialog.Description = this.Title;
                    folderBrowserDialog.SelectedPath = !string.IsNullOrEmpty(this.SelectedPath) ? this.SelectedPath : this.InitialDirectory;
                    folderBrowserDialog.ShowNewFolderButton = false;
                    if (folderBrowserDialog.ShowDialog() == DialogResult.OK)
                    {
                        fileDialog.FileName = folderBrowserDialog.SelectedPath;
                        return true;
                    }
                    return false;
                }

                protected override bool RunDialog(IntPtr hwndOwner)
                {
                    if (Environment.OSVersion.Version.Major >= 6)
                    {      
                        try
                        {
                            bool flag = false;
                            System.Reflection.Assembly assembly = Assembly.Load("System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");
                            Type typeIFileDialog = assembly.GetType("System.Windows.Forms.FileDialogNative").GetNestedType("IFileDialog", BindingFlags.NonPublic);
                            uint num = 0;
                            object dialog = InvokeMethod(fileDialog.GetType(), fileDialog, "CreateVistaDialog", null);
                            InvokeMethod(fileDialog.GetType(), fileDialog, "OnBeforeVistaDialog", new object[] { dialog });
                            uint options = (uint)InvokeMethod(typeof(System.Windows.Forms.FileDialog), fileDialog, "GetOptions", null) | (uint)0x20;
                            InvokeMethod(typeIFileDialog, dialog, "SetOptions", new object[] { options });
                            Type vistaDialogEventsType = assembly.GetType("System.Windows.Forms.FileDialog").GetNestedType("VistaDialogEvents", BindingFlags.NonPublic);
                            object pfde = Activator.CreateInstance(vistaDialogEventsType, fileDialog);
                            object[] parameters = new object[] { pfde, num };
                            InvokeMethod(typeIFileDialog, dialog, "Advise", parameters);
                            num = (uint)parameters[1];
                            try
                            {
                                int num2 = (int)InvokeMethod(typeIFileDialog, dialog, "Show", new object[] { hwndOwner });
                                flag = 0 == num2;
                            }
                            finally
                            {
                                InvokeMethod(typeIFileDialog, dialog, "Unadvise", new object[] { num });
                                GC.KeepAlive(pfde);
                            }
                            return flag;
                        }
                        catch
                        {
                            return ShowOriginalBrowserDialog(hwndOwner);
                        }
                    }
                    else
                        return ShowOriginalBrowserDialog(hwndOwner);
                }

                public override void Reset()
                {
                    fileDialog.Reset();
                }
            }
       }
"@ -IgnoreWarnings | Out-Null
	}
	#endregion Define SAPIEN Types

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$form1 = New-Object 'System.Windows.Forms.Form'
	$buttonPlay = New-Object 'System.Windows.Forms.Button'
	$buttonBrowse = New-Object 'System.Windows.Forms.Button'
	$textbox1 = New-Object 'System.Windows.Forms.TextBox'
	$labelReplayFile = New-Object 'System.Windows.Forms.Label'
	$menustrip1 = New-Object 'System.Windows.Forms.MenuStrip'
	$openfiledialog1 = New-Object 'System.Windows.Forms.OpenFileDialog'
	$fileToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$locateLoLInstallToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$folderbrowsermoderndialog1 = New-Object 'SAPIENTypes.FolderBrowserModernDialog'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	$form1_Load = {
		if (Test-Path -Path .\LoLInstallPaths.txt) {
			$FileData = Get-Content -Path .\LoLInstallPaths.txt
			
			if ($null -ne $FileData) {
				$script:LoLExecutePath = (Get-Content -Path .\LoLInstallPaths.txt)[0]
				$script:LoLReplaysPath = (Get-Content -Path .\LoLInstallPaths.txt)[1]
			}
		}
	}
	
	$buttonPlay_Click = {
		$Process = New-Object -TypeName System.Diagnostics.Process
		$Process.StartInfo.FileName = $script:LoLExecutePath
		$Process.StartInfo.Arguments = $script:SelectedReplayPath
		$Process.StartInfo.RedirectStandardOutput = $true
		$Process.StartInfo.UseShellExecute = $false
		$Process.Start()
		$Process.WaitForExit()
		[String]$out = $Process.StandardOutput.ReadToEnd()
		Write-Output $out
		
	#	Start-Process -FilePath $script:LoLExecutePath -ArgumentList $script:SelectedReplayPath
	}
	
	$buttonBrowse_Click = {
		if ($openfiledialog1.ShowDialog() -eq 'OK') {
			$script:SelectedReplayPath = $openfiledialog1.SafeFileName
			$textbox1.Text = $script:SelectedReplayPath
		}
	}
	
	$locateLoLInstallToolStripMenuItem_Click = {
		if ($folderbrowsermoderndialog1.ShowDialog() -eq 'OK') {
			$script:LoLExecutePath = Get-LoLExecutePath -SelectedPath $folderbrowsermoderndialog1.SelectedPath
			$script:LoLReplaysPath = Get-LoLReplaysPath
			
			$LoLInstallFile = New-Item -Path .\LoLInstallPaths.txt -ItemType File -Force
			
			Add-Content -Path $LoLInstallFile -Value $script:LoLExecutePath
			Add-Content -Path $LoLInstallFile -Value $script:LoLReplaysPath
		}
	}
	
	function Get-LoLReplaysPath {
		$MyDocuments = [System.Environment]::GetFolderPath('MyDocuments')
		Join-Path -Path $MyDocuments -ChildPath 'League of Legends\Replays'
	}
	
	function Get-LoLExecutePath {
		param
		(
			[Parameter(Mandatory = $true,
					   Position = 0)]
			$SelectedPath
		)
		
		$LoLReleasesPath = Join-Path -Path $SelectedPath -ChildPath 'RADS\solutions\lol_game_client_sln\releases'
		$LoLReleasesPath = Join-Path -Path $LoLReleasesPath -ChildPath (Get-ChildItem -Path $LoLReleasesPath)
		Join-Path -Path $LoLReleasesPath -ChildPath 'deploy\League of Legends.exe'
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$form1.WindowState = $InitialFormWindowState
	}
	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonPlay.remove_Click($buttonPlay_Click)
			$buttonBrowse.remove_Click($buttonBrowse_Click)
			$form1.remove_Load($form1_Load)
			$locateLoLInstallToolStripMenuItem.remove_Click($locateLoLInstallToolStripMenuItem_Click)
			$form1.remove_Load($Form_StateCorrection_Load)
			$form1.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$form1.SuspendLayout()
	$menustrip1.SuspendLayout()
	#
	# form1
	#
	$form1.Controls.Add($buttonPlay)
	$form1.Controls.Add($buttonBrowse)
	$form1.Controls.Add($textbox1)
	$form1.Controls.Add($labelReplayFile)
	$form1.Controls.Add($menustrip1)
	$form1.AutoScaleDimensions = '6, 13'
	$form1.AutoScaleMode = 'Font'
	$form1.ClientSize = '284, 131'
	$form1.MainMenuStrip = $menustrip1
	$form1.MinimumSize = '300, 170'
	$form1.Name = 'form1'
	$form1.Text = 'Form'
	$form1.add_Load($form1_Load)
	#
	# buttonPlay
	#
	$buttonPlay.Anchor = 'Bottom, Right'
	$buttonPlay.Location = '197, 83'
	$buttonPlay.Name = 'buttonPlay'
	$buttonPlay.Size = '75, 23'
	$buttonPlay.TabIndex = 3
	$buttonPlay.Text = 'Play'
	$buttonPlay.UseVisualStyleBackColor = $True
	$buttonPlay.add_Click($buttonPlay_Click)
	#
	# buttonBrowse
	#
	$buttonBrowse.Anchor = 'Bottom, Left'
	$buttonBrowse.Location = '12, 83'
	$buttonBrowse.Name = 'buttonBrowse'
	$buttonBrowse.Size = '75, 23'
	$buttonBrowse.TabIndex = 2
	$buttonBrowse.Text = 'Browse'
	$buttonBrowse.UseVisualStyleBackColor = $True
	$buttonBrowse.add_Click($buttonBrowse_Click)
	#
	# textbox1
	#
	$textbox1.Anchor = 'Top, Left, Right'
	$textbox1.Location = '12, 40'
	$textbox1.Name = 'textbox1'
	$textbox1.ReadOnly = $True
	$textbox1.Size = '260, 20'
	$textbox1.TabIndex = 1
	#
	# labelReplayFile
	#
	$labelReplayFile.AutoSize = $True
	$labelReplayFile.Location = '12, 24'
	$labelReplayFile.Name = 'labelReplayFile'
	$labelReplayFile.Size = '62, 13'
	$labelReplayFile.TabIndex = 0
	$labelReplayFile.Text = 'Replay File:'
	#
	# menustrip1
	#
	[void]$menustrip1.Items.Add($fileToolStripMenuItem)
	$menustrip1.Location = '0, 0'
	$menustrip1.Name = 'menustrip1'
	$menustrip1.Size = '284, 24'
	$menustrip1.TabIndex = 4
	$menustrip1.Text = 'menustrip1'
	#
	# openfiledialog1
	#
	$openfiledialog1.FileName = 'openfiledialog1'
	#
	# fileToolStripMenuItem
	#
	[void]$fileToolStripMenuItem.DropDownItems.Add($locateLoLInstallToolStripMenuItem)
	$fileToolStripMenuItem.Name = 'fileToolStripMenuItem'
	$fileToolStripMenuItem.Size = '37, 20'
	$fileToolStripMenuItem.Text = 'File'
	#
	# locateLoLInstallToolStripMenuItem
	#
	$locateLoLInstallToolStripMenuItem.Name = 'locateLoLInstallToolStripMenuItem'
	$locateLoLInstallToolStripMenuItem.Size = '165, 22'
	$locateLoLInstallToolStripMenuItem.Text = 'Locate LoL Install'
	$locateLoLInstallToolStripMenuItem.add_Click($locateLoLInstallToolStripMenuItem_Click)
	#
	# folderbrowsermoderndialog1
	#
	$menustrip1.ResumeLayout()
	$form1.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $form1.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$form1.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$form1.add_FormClosed($Form_Cleanup_FormClosed)
	#Show the Form
	return $form1.ShowDialog()

} #End Function

#Call the form
Show-LoL_Replay_Assistant_psf | Out-Null
